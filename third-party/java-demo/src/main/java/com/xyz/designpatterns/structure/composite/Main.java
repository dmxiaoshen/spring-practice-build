package com.xyz.designpatterns.structure.composite;

/**
 * Created by hzhsg on 2018/5/7.
 * 组合模式
 * 组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。
 * 组合模式依据树形结构来组合对象，用来表示部分以及整体层次。
 * 这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。

 这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。

 我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。

 意图：将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。

 主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。

 何时使用： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。

 如何解决：树枝和叶子实现统一接口，树枝内部组合该接口。

 关键代码：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。

 应用实例： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。

 优点： 1、高层模块调用简单。 2、节点自由增加。

 缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。

 使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。

 注意事项：定义时为具体类。
 */
public class Main {
    public static void main(String[] args) {
            testComposite();
    }

    /**
     * 1. 主要优点

     组合模式的主要优点如下：

     (1) 组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。

     (2) 客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码。

     (3) 在组合模式中增加新的容器构件和叶子构件都很方便，无须对现有类库进行任何修改，符合“开闭原则”。

     (4) 组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子对象和容器对象的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。

     2. 主要缺点

     组合模式的主要缺点如下：

     在增加新构件时很难对容器中的构件类型进行限制。有时候我们希望一个容器中只能有某些特定类型的对象，例如在某个文件夹中只能包含文本文件，使用组合模式时，不能依赖类型系统来施加这些约束，因为它们都来自于相同的抽象层，在这种情况下，必须通过在运行时进行类型检查来实现，这个实现过程较为复杂。

     3. 适用场景

     在以下情况下可以考虑使用组合模式：

     (1) 在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，客户端可以一致地对待它们。

     (2) 在一个使用面向对象语言开发的系统中需要处理一个树形结构。

     (3) 在一个系统中能够分离出叶子对象和容器对象，而且它们的类型不固定，需要增加一些新的类型。
     */
    public static void testComposite(){
        Company company = new Company("Sunny公司北京总部");
        company.add(new SalesDepartment("北京公司销售部门"));
        company.add(new OperationDepartment("北京公司运营部门"));
        Company company1 = new Company("上海分公司");
        company1.add(new SalesDepartment("上海公司销售部门"));
        company1.add(new OperationDepartment("上海公司运营部门"));
        company.add(company1);
        company.show(1);
        company.sendmail(1);
    }
}
